// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Day1.Models;

public partial class PcContext : DbContext
{
    public PcContext()
    {
    }

    public PcContext(DbContextOptions<PcContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Course> Courses { get; set; }

    public virtual DbSet<Instructor> Instructors { get; set; }

    public virtual DbSet<Lab> Labs { get; set; }
    public virtual DbSet<Country> Countries{ get; set; }

    #warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
	protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) 
    => optionsBuilder.UseSqlServer("Data Source=MOSTAFAMAGED\\SQLEXPRESS;Initial Catalog=PrivateCenter;Integrated Security=True;TrustServerCertificate=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Course>(entity =>
        {
            entity.HasKey(e => e.CRS_ID).HasName("c5");

            entity.ToTable("Course");

            entity.HasIndex(e => e.Duration, "c6").IsUnique();

            entity.Property(e => e.Cname)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Instructor>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("c1");

            entity.ToTable("Instructor");

            entity.HasIndex(e => e.Overtime, "c4").IsUnique();

            entity.Property(e => e.BD).HasColumnType("date");
            entity.Property(e => e.Fname)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HireDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("date");
            entity.Property(e => e.Lname)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NetSalary).HasComputedColumnSql("([Salary]-[Overtime])", false);
            entity.Property(e => e.Salary).HasDefaultValueSql("((3000))");
            entity.Property(e => e.address)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.age).HasComputedColumnSql("(datepart(year,getdate())-datepart(year,[BD]))", false);

            entity.HasMany(d => d.CRs).WithMany(p => p.INs)
                .UsingEntity<Dictionary<string, object>>(
                    "Teaching",
                    r => r.HasOne<Course>().WithMany()
                        .HasForeignKey("CRS_ID")
                        .HasConstraintName("c9"),
                    l => l.HasOne<Instructor>().WithMany()
                        .HasForeignKey("INS_ID")
                        .HasConstraintName("c8"),
                    j =>
                    {
                        j.HasKey("INS_ID", "CRS_ID").HasName("c7");
                        j.ToTable("Teaching");
                    });
        });

        modelBuilder.Entity<Lab>(entity =>
        {
            entity.HasKey(e => new { e.LID, e.CID }).HasName("c10");

            entity.ToTable("Lab");

            entity.Property(e => e.LID).ValueGeneratedOnAdd();
            entity.Property(e => e.Lab_Location)
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.HasOne(d => d.CIDNavigation).WithMany(p => p.Labs)
                .HasForeignKey(d => d.CID)
                .HasConstraintName("c12");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}