// <auto-generated />
using System;
using Day1.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Day1.Migrations
{
    [DbContext(typeof(PcContext))]
    partial class PcContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Day1.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InternalRef")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifyBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Day1.Models.Course", b =>
                {
                    b.Property<int?>("CRS_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("CRS_ID"));

                    b.Property<string>("Cname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.HasKey("CRS_ID")
                        .HasName("c5");

                    b.HasIndex(new[] { "Duration" }, "c6")
                        .IsUnique();

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("Day1.Models.Instructor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("BD")
                        .HasColumnType("date");

                    b.Property<string>("Fname")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("HireDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Lname")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("NetSalary")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("([Salary]-[Overtime])", false);

                    b.Property<int?>("Overtime")
                        .HasColumnType("int");

                    b.Property<int?>("Salary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((3000))");

                    b.Property<string>("address")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("age")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("(datepart(year,getdate())-datepart(year,[BD]))", false);

                    b.HasKey("ID")
                        .HasName("c1");

                    b.HasIndex(new[] { "Overtime" }, "c4")
                        .IsUnique()
                        .HasFilter("[Overtime] IS NOT NULL");

                    b.ToTable("Instructor", (string)null);
                });

            modelBuilder.Entity("Day1.Models.Lab", b =>
                {
                    b.Property<int>("LID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LID"));

                    b.Property<int>("CID")
                        .HasColumnType("int");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Lab_Location")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("LID", "CID")
                        .HasName("c10");

                    b.HasIndex("CID");

                    b.ToTable("Lab", (string)null);
                });

            modelBuilder.Entity("Teaching", b =>
                {
                    b.Property<int>("INS_ID")
                        .HasColumnType("int");

                    b.Property<int>("CRS_ID")
                        .HasColumnType("int");

                    b.HasKey("INS_ID", "CRS_ID")
                        .HasName("c7");

                    b.HasIndex("CRS_ID");

                    b.ToTable("Teaching", (string)null);
                });

            modelBuilder.Entity("Day1.Models.Lab", b =>
                {
                    b.HasOne("Day1.Models.Course", "CIDNavigation")
                        .WithMany("Labs")
                        .HasForeignKey("CID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("c12");

                    b.Navigation("CIDNavigation");
                });

            modelBuilder.Entity("Teaching", b =>
                {
                    b.HasOne("Day1.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CRS_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("c9");

                    b.HasOne("Day1.Models.Instructor", null)
                        .WithMany()
                        .HasForeignKey("INS_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("c8");
                });

            modelBuilder.Entity("Day1.Models.Course", b =>
                {
                    b.Navigation("Labs");
                });
#pragma warning restore 612, 618
        }
    }
}
